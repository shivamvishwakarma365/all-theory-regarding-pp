basic hacks--


 // Find number of bits in the given integer
   int number_of_bits = floor(log2(n))+1;

-------------
for 1st compliment
-
// Find number of bits in the given integer
   int number_of_bits = floor(log2(n))+1;
 
   // XOR the given integer with poe(2,
   // number_of_bits-1 and print the result
   return ((1 << number_of_bits) - 1) ^ n;
--------------
--------------
all hacks-
1.check if a interger is even or odd-like 
the expression n&1 returns a value 1 or 0 depending upon whether n is odd or even

2.detect if two integers have opposite siigns or not-

--in a positive integer the leftmost bit 0 
--in a negative integer the right most bit is 1

3.Add 1 to an integer-
--the expression -~X will add 1 to the integer 

--negative numbers are stored in 2's complement form 

----we know that to get a negative of a number invert its bits and add 1 to it;

4.Turn off the k'th bit in a number
--if we do a bitwise AND of his expression with  n like
n&~(1<<(k-1))

5.turn on kth bit in a number
--we use n|(1<<(k-1))

6.check if the kth bit is set for a number

7 .toggle the kth bit

n^(1<<k)

8.converting uppercase to lowercase by using or operation with a space 

// Convert uppercase character to lowercase
for (char ch = 'A'; ch <= 'Z'; ch++) {
    cout << char(ch | ' '));        // prints abcdefghijklmnopqrstuvwxyz
}

9.covert lowercase to uppercase using & operation with an underscore

10.invert alphacet's case
using xor operation with a space;

11.find the letter's position in an alphabet.

('A' & 31) this will return 1
(â€˜câ€™ & 31) returns position 3






